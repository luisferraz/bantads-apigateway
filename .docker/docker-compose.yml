
#Networks
  # Todos os servi√ßos devem usar a rede BACKEND para interagirem entre si
networks:
  mongo_network:
    driver: bridge
  backend:
    driver: bridge

volumes:
  mongodb_server_data:

services:
  # MongoDB AUTH Database
  bantads_authdb:
    container_name: bantads_authdb
    image: mongo
    restart: always
    ports: 
      - 27017:27017
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongo 10.10.10.60:27017/test --quiet
      interval: 30s
      timeout: 45s
      retries: 10
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: admin
      MONGO_INITDB_DATABASE: bantads
    volumes:
      - mongodb_server_data:/data/db
      - ./mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js
    networks:
      - mongo_network

  # # MongoDB GUI (Mongo Express)
  # mongo-express:
  #   container_name: mongo_GUI
  #   image: mongo-express
  #   restart: always
  #   ports:
  #     - 27018:8081
  #   environment:
  #      ME_CONFIG_BASICAUTH_USERNAME: root
  #      ME_CONFIG_BASICAUTH_PASSWORD: admin
  #      ME_CONFIG_MONGODB_PORT: 27017
  #      ME_CONFIG_MONGODB_ADMINUSERNAME: root
  #      ME_CONFIG_MONGODB_ADMINPASSWORD: admin
  #      ME_CONFIG_MONGODB_SERVER: bantads_authdb
  #      ME_CONFIG_MONGODB_ENABLE_ADMIN: true
  #   networks:
  #     - mongo_network
  #   depends_on:
  #     - bantads_authdb

  # API Gateway
  bantads-api-gateway:
    image: bantads-api-gateway
    container_name: bantads_api_gateway
    build:
      context: ..
      dockerfile: ./.docker/APIGateway_Dockerfile
    ports:
      - 3000:3000
    volumes:
      - ../:/usr/src/app
    networks:
      - backend


